from django.db import models
from django.db.models import Avg, StdDev

class ControlChartReading(models.Model):
    date = models.DateField(unique=True)
    reading1 = models.FloatField()
    reading2 = models.FloatField()
    reading3 = models.FloatField()
    reading4 = models.FloatField()
    reading5 = models.FloatField()
    usl = models.FloatField(blank=True, null=True)  # New field for Upper Specification Limit
    lsl = models.FloatField(blank=True, null=True)  # New field for Lower Specification Limit

    def save(self, *args, **kwargs):
        self.clean()
        super().save(*args, **kwargs)
        self.calculate_statistics()

    def clean(self):
        readings = [self.reading1, self.reading2, self.reading3, self.reading4, self.reading5]
        if any(reading < 0 for reading in readings):
            raise ValueError("Readings cannot be negative.")
        if self.usl is not None and self.lsl is not None and self.usl <= self.lsl:
            raise ValueError("USL must be greater than LSL")

    def calculate_statistics(self):
        readings = [self.reading1, self.reading2, self.reading3, self.reading4, self.reading5]
        x_bar = sum(readings) / len(readings)
        r = max(readings) - min(readings)

        ControlChartStatistics.objects.update_or_create(
            date=self.date,
            defaults={
                'x_bar': x_bar, 
                'r': r,
                'usl': self.usl if self.usl is not None else 375,
                'lsl': self.lsl if self.lsl is not None else 355
            }
        )

class ControlChartStatistics(models.Model):
    date = models.DateField(unique=True)
    x_bar = models.FloatField()
    r = models.FloatField()
    usl = models.FloatField()
    lsl = models.FloatField()

    @classmethod
    def calculate_control_limits(cls):
        data = cls.objects.all()
        if not data.exists():
            return None

        x_bar_avg = data.aggregate(Avg('x_bar'))['x_bar__avg']
        r_bar = data.aggregate(Avg('r'))['r__avg']

        a2, d3, d4 = 0.58, 0, 2.11  # Constants for n=5 from the Excel sheet

        ucl_x_bar = x_bar_avg + a2 * r_bar
        lcl_x_bar = x_bar_avg - a2 * r_bar
        ucl_r = d4 * r_bar
        lcl_r = d3 * r_bar

        return {
            'x_bar_avg': x_bar_avg,
            'r_bar': r_bar,
            'ucl_x_bar': ucl_x_bar,
            'lcl_x_bar': lcl_x_bar,
            'ucl_r': ucl_r,
            'lcl_r': lcl_r
        }

    @classmethod
    def calculate_capability_indices(cls):
        data = cls.objects.all()
        if not data.exists():
            return None

        x_bar_avg = data.aggregate(Avg('x_bar'))['x_bar__avg']
        r_bar = data.aggregate(Avg('r'))['r__avg']
        
        # Get the latest USL and LSL values
        latest_stats = cls.objects.latest('date')
        usl = latest_stats.usl
        lsl = latest_stats.lsl
        
        # Estimate standard deviation using average range method
        std_dev = r_bar / 2.326  # d2 for n=5 is 2.326

        cp = (usl - lsl) / (6 * std_dev)
        cpk_upper = (usl - x_bar_avg) / (3 * std_dev)
        cpk_lower = (x_bar_avg - lsl) / (3 * std_dev)
        cpk = min(cpk_upper, cpk_lower)

        return {
            'cp': cp,
            'cpk': cpk,
            'cpk_upper': cpk_upper,
            'cpk_lower': cpk_lower,
            'std_dev': std_dev,
            'usl': usl,
            'lsl': lsl
        }

from django.db import models
from django.db.models import Avg, StdDev

class ControlChartReading(models.Model):
    date = models.DateField(unique=True)
    reading1 = models.FloatField()
    reading2 = models.FloatField()
    reading3 = models.FloatField()
    reading4 = models.FloatField()
    reading5 = models.FloatField()
    usl = models.FloatField(blank=True, null=True)  # Optional Upper Specification Limit
    lsl = models.FloatField(blank=True, null=True)  # Optional Lower Specification Limit

    def save(self, *args, **kwargs):
        self.clean()
        super().save(*args, **kwargs)
        self.calculate_statistics()

    def clean(self):
        readings = [self.reading1, self.reading2, self.reading3, self.reading4, self.reading5]
        if any(reading < 0 for reading in readings):
            raise ValueError("Readings cannot be negative.")
        if self.usl is not None and self.lsl is not None and self.usl <= self.lsl:
            raise ValueError("USL must be greater than LSL")

    def calculate_statistics(self):
        readings = [self.reading1, self.reading2, self.reading3, self.reading4, self.reading5]
        x_bar = sum(readings) / len(readings)
        r = max(readings) - min(readings)

        defaults = {'x_bar': x_bar, 'r': r}
        if self.usl is not None:
            defaults['usl'] = self.usl
        if self.lsl is not None:
            defaults['lsl'] = self.lsl

        ControlChartStatistics.objects.update_or_create(
            date=self.date,
            defaults=defaults
        )

class ControlChartStatistics(models.Model):
    date = models.DateField(unique=True)
    x_bar = models.FloatField()
    r = models.FloatField()
    usl = models.FloatField(default=375)  # Default Upper Specification Limit
    lsl = models.FloatField(default=355)  # Default Lower Specification Limit

    @classmethod
    def calculate_control_limits(cls):
        data = cls.objects.all()
        if not data.exists():
            return None

        x_bar_avg = data.aggregate(Avg('x_bar'))['x_bar__avg']
        r_bar = data.aggregate(Avg('r'))['r__avg']

        a2, d3, d4 = 0.58, 0, 2.11  # Constants for n=5 from the Excel sheet

        ucl_x_bar = x_bar_avg + a2 * r_bar
        lcl_x_bar = x_bar_avg - a2 * r_bar
        ucl_r = d4 * r_bar
        lcl_r = d3 * r_bar

        return {
            'x_bar_avg': x_bar_avg,
            'r_bar': r_bar,
            'ucl_x_bar': ucl_x_bar,
            'lcl_x_bar': lcl_x_bar,
            'ucl_r': ucl_r,
            'lcl_r': lcl_r
        }

    @classmethod
    def calculate_capability_indices(cls):
        data = cls.objects.all()
        if not data.exists():
            return None

        x_bar_avg = data.aggregate(Avg('x_bar'))['x_bar__avg']
        r_bar = data.aggregate(Avg('r'))['r__avg']
        
        # Get the latest USL and LSL values
        latest_stats = cls.objects.latest('date')
        usl = latest_stats.usl
        lsl = latest_stats.lsl
        
        # Estimate standard deviation using average range method
        std_dev = r_bar / 2.326  # d2 for n=5 is 2.326

        cp = (usl - lsl) / (6 * std_dev)
        cpk_upper = (usl - x_bar_avg) / (3 * std_dev)
        cpk_lower = (x_bar_avg - lsl) / (3 * std_dev)
        cpk = min(cpk_upper, cpk_lower)

        return {
            'cp': cp,
            'cpk': cpk,
            'cpk_upper': cpk_upper,
            'cpk_lower': cpk_lower,
            'std_dev': std_dev,
            'usl': usl,
            'lsl': lsl
        }        

